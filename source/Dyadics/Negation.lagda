Andrew Sneap, 17 February 2022

\begin{code}

{-# OPTIONS --without-K --exact-split --safe --auto-inline #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)
open import Dyadics.Type
open import Dyadics.Order
open import Integers.Type
open import Integers.Multiplication
open import Integers.Negation renaming (-_ to ‚Ñ§-_)
open import Integers.Order
open import Integers.Parity
open import Naturals.Exponentiation
open import Notation.Order
open import UF.Base hiding (_‚âà_)
open import UF.Subsingletons

module Dyadics.Negation where

-_ : ‚Ñ§[1/2] ‚Üí ‚Ñ§[1/2]
- ((z , n) , _) = normalise-pos (‚Ñ§- z , n)

infix 31 -_

‚Ñ§[1/2]-minus-zero : - 0‚Ñ§[1/2] Ôºù 0‚Ñ§[1/2]
‚Ñ§[1/2]-minus-zero = refl

minus-normalise-pos : (p : ‚Ñ§) (a : ‚Ñï)
                    ‚Üí - normalise-pos (p , a) Ôºù normalise-pos (‚Ñ§- p , a)
minus-normalise-pos p a = Œ≥
 where
  p' = (pr‚ÇÅ ‚àò pr‚ÇÅ) (normalise-pos (p , a))
  a' = (pr‚ÇÇ ‚àò pr‚ÇÅ) (normalise-pos (p , a))
  Œ± = pr‚ÇÇ (normalise-pos (p , a))

  I : (p , a) ‚âà' (p' , a')
  I = ‚âà'-normalise-pos (p , a)

  II : (‚Ñ§- p' , a') ‚âà' (‚Ñ§- p , a)
  II = (‚Ñ§- p') * pos (2^ a)  Ôºù‚ü® negation-dist-over-mult' p' (pos (2^ a)) ‚ü©
        ‚Ñ§- p' * pos (2^ a)   Ôºù‚ü® ap ‚Ñ§-_ (I ‚Åª¬π) ‚ü©
        ‚Ñ§- p * pos (2^ a')   Ôºù‚ü® negation-dist-over-mult' p (pos (2^ a')) ‚Åª¬π ‚ü©
        (‚Ñ§- p) * pos (2^ a') ‚àé

  Œ≥ : - normalise-pos (p , a) Ôºù normalise-pos (‚Ñ§- p , a)
  Œ≥ = - normalise-pos (p , a)    Ôºù‚ü® refl ‚ü©
      - ((p' , a') , Œ±)          Ôºù‚ü® refl ‚ü©
      normalise-pos (‚Ñ§- p' , a') Ôºù‚ü® ‚âà'-to-Ôºù (‚Ñ§- p' , a') (‚Ñ§- p , a) II ‚ü©
      normalise-pos (‚Ñ§- p , a)   ‚àé

‚Ñ§[1/2]-minus-minus : (p : ‚Ñ§[1/2]) ‚Üí p Ôºù - (- p)
‚Ñ§[1/2]-minus-minus ((z , n) , Œ±) = Œ≥
 where
  I : (z , n) , Œ± ‚âà normalise-pos (z , n)
  I = ‚âà-normalise-pos ((z , n) , Œ±)

  Œ≥ : (z , n) , Œ± Ôºù - (- ((z , n) , Œ±))
  Œ≥ = (z , n) , Œ±                   Ôºù‚ü® i    ‚ü©
      normalise-pos (z , n)         Ôºù‚ü® ii   ‚ü©
      normalise-pos (‚Ñ§- (‚Ñ§- z) , n) Ôºù‚ü® iii  ‚ü©
      - normalise-pos (‚Ñ§- z , n)    Ôºù‚ü® refl ‚ü©
      - (- ((z , n) , Œ±))           ‚àé
   where
    i   = ‚âà-to-Ôºù ((z , n) , Œ±) (normalise-pos (z , n)) I
    ii  = ap (Œª - ‚Üí normalise-pos (- , n)) (minus-minus-is-plus z ‚Åª¬π)
    iii = minus-normalise-pos (‚Ñ§- z) n ‚Åª¬π

‚Ñ§[1/2]‚â§-swap : (p q : ‚Ñ§[1/2]) ‚Üí p ‚â§ q ‚Üí - q ‚â§ - p
‚Ñ§[1/2]‚â§-swap ((p , a) , Œ±) ((q , b) , Œ≤) l = Œ≥
 where
  I : ‚Ñ§- (q * pos (2^ a)) ‚â§ ‚Ñ§- (p * pos (2^ b))
  I = ‚Ñ§‚â§-swap (p * pos (2^ b)) (q * pos (2^ a)) l

  II : ‚Ñ§- q * pos (2^ a) Ôºù (‚Ñ§- q) * pos (2^ a)
  II = negation-dist-over-mult' q (pos (2^ a)) ‚Åª¬π

  III : ‚Ñ§- p * pos (2^ b) Ôºù (‚Ñ§- p) * pos (2^ b)
  III = negation-dist-over-mult' p (pos (2^ b)) ‚Åª¬π

  IV : (‚Ñ§- q) * pos (2^ a) ‚â§ (‚Ñ§- p) * pos (2^ b)
  IV = transport‚ÇÇ _‚â§_ II III I

  Œ≥ : normalise-pos (‚Ñ§- q , b) ‚â§ normalise-pos (‚Ñ§- p , a)
  Œ≥ = normalise-pos-‚â§ (‚Ñ§- q , b) (‚Ñ§- p , a) IV

‚Ñ§[1/2]<-swap : (p q : ‚Ñ§[1/2]) ‚Üí p < q ‚Üí - q < - p
‚Ñ§[1/2]<-swap p q l = Œ≥ (‚Ñ§[1/2]‚â§-split (- q) (- p) I)
 where
  l' : p ‚â§ q
  l' = ‚Ñ§[1/2]<-coarser-than-‚â§ p q l

  I : (- q) ‚â§ (- p)
  I = ‚Ñ§[1/2]‚â§-swap p q l'
  
  Œ≥ : (- q) < (- p) ‚àî ((- q) Ôºù (- p)) ‚Üí - q < - p
  Œ≥ (inl l) = l
  Œ≥ (inr e) = ùüò-elim (‚Ñ§[1/2]<-not-itself p III)
   where
    II : q Ôºù p
    II = q       Ôºù‚ü® ‚Ñ§[1/2]-minus-minus q    ‚ü©
         - (- q) Ôºù‚ü® ap -_ e                 ‚ü©
         - (- p) Ôºù‚ü® ‚Ñ§[1/2]-minus-minus p ‚Åª¬π ‚ü©
         p       ‚àé
         
    III : p < p
    III = transport (p <_) II l

‚Ñ§‚â§-swap' : (p q : ‚Ñ§[1/2]) ‚Üí - p ‚â§ - q ‚Üí q ‚â§ p
‚Ñ§‚â§-swap' p q l = Œ≥
 where
  I : - (- q) ‚â§ - (- p)
  I = ‚Ñ§[1/2]‚â§-swap (- p) (- q) l

  II : - (- q) Ôºù q
  II = ‚Ñ§[1/2]-minus-minus q ‚Åª¬π

  III : - (- p) Ôºù p
  III = ‚Ñ§[1/2]-minus-minus p ‚Åª¬π

  Œ≥ : q ‚â§ p
  Œ≥ = transport‚ÇÇ _‚â§_ II III I

\end{code}
