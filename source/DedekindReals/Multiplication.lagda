Andrew Sneap

\begin{code}
{-# OPTIONS --without-K --exact-split --safe #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_) 

open import Notation.Order
open import UF.PropTrunc 
open import UF.Subsingletons 
open import UF.FunExt 
open import UF.Powerset 

open import Rationals.Rationals
open import Rationals.Order

module DedekindReals.Multiplication
         (pe : Prop-Ext) 
         (pt : propositional-truncations-exist)
         (fe : Fun-Ext)
       where

open import Rationals.Multiplication renaming (_*_ to _‚Ñö*_)
open import Rationals.MinMax fe
open import DedekindReals.Reals pe pt fe
open PropositionalTruncation pt


\end{code}

Multiplication is defined as in the HoTT Book. It reminds of interval multiplication of rational numbers.

Inhabitedness: by inhabitedness of x and y, we find values
on both sides of each. Then using the property that rationals have no
least element, then using the relevant min/max calculation we
trivially find a p which inhabits each cut of the product.

Roundedness: roundedness in the left to right direction follows
directly from density of rationals, and transitivity of rationals
order. In the right to left, transivity alone completes the proof.

_*_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
x * y = (L , R) , inhabited-L , inhabited-R , rounded-L , rounded-R , is-disjoint , {!!}
 where
  L R : ùìü ‚Ñö
  L p = (‚àÉ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a < x √ó x < b √ó c < y √ó y < d √ó p < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)) , ‚àÉ-is-prop
  R q = (‚àÉ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a < x √ó x < b √ó c < y √ó y < d √ó max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d) < q) , ‚àÉ-is-prop

  x-values : ‚à• (Œ£ a Íûâ ‚Ñö , a < x) √ó (Œ£ b Íûâ ‚Ñö , x < b) ‚à•
  x-values = binary-choice (inhabited-from-real-L x) (inhabited-from-real-R x)

  y-values : ‚à• (Œ£ c Íûâ ‚Ñö , c < y) √ó (Œ£ d Íûâ ‚Ñö , y < d) ‚à•
  y-values = binary-choice (inhabited-from-real-L y) (inhabited-from-real-R y)

  xy-values : ‚à• ((Œ£ a Íûâ ‚Ñö , a < x) √ó (Œ£ b Íûâ ‚Ñö , x < b)) √ó ((Œ£ c Íûâ ‚Ñö , c < y) √ó (Œ£ d Íûâ ‚Ñö , y < d)) ‚à•
  xy-values = binary-choice x-values y-values

  inhabited-L : inhabited-left L
  inhabited-L = ‚à•‚à•-functor I xy-values
   where
    I : ((Œ£ a Íûâ ‚Ñö , a < x) √ó (Œ£ b Íûâ ‚Ñö , x < b)) √ó ((Œ£ c Íûâ ‚Ñö , c < y) √ó (Œ£ d Íûâ ‚Ñö , y < d))
      ‚Üí Œ£ p Íûâ ‚Ñö , p ‚àà L
    I (((a , a<x) , (b , x<b)) , ((c , c<y) , (d , y<d))) = II (‚Ñö-no-least-element (min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)))
     where
      II : (Œ£ p Íûâ ‚Ñö , p <  min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d))
         ‚Üí Œ£ p Íûâ ‚Ñö , p ‚àà L
      II (p , p<m) = p , ‚à£ (a , b , c , d) , (a<x , x<b , c<y , y<d , p<m) ‚à£

  inhabited-R : inhabited-right R
  inhabited-R = ‚à•‚à•-functor I xy-values
   where
    I : ((Œ£ a Íûâ ‚Ñö , a < x) √ó (Œ£ b Íûâ ‚Ñö , x < b)) √ó ((Œ£ c Íûâ ‚Ñö , c < y) √ó (Œ£ d Íûâ ‚Ñö , y < d))
      ‚Üí Œ£ q Íûâ ‚Ñö , q ‚àà R
    I (((a , a<x) , (b , x<b)) , ((c , c<y) , (d , y<d))) = II (‚Ñö-no-max-element (max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)))
     where
      II : (Œ£ q Íûâ ‚Ñö , max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d) < q)
         ‚Üí Œ£ q Íûâ ‚Ñö , q ‚àà R
      II (q , m<q) =  q , ‚à£ (a , b , c , d) , (a<x , x<b , c<y , y<d , m<q) ‚à£

  rounded-L : rounded-left L
  rounded-L p = ltr , rtl
   where
    ltr : p ‚àà L ‚Üí ‚àÉ p' Íûâ ‚Ñö , p < p' √ó p' ‚àà L
    ltr = ‚à•‚à•-functor I
     where
      I : (Œ£ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a < x √ó x < b √ó c < y √ó y < d √ó p < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d))
        ‚Üí Œ£ p' Íûâ ‚Ñö , p < p' √ó p' ‚àà L
      I ((a , b , c , d) , a<x , x<b , c<y , y<d , p<m) = II (‚Ñö-dense fe p (min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)) p<m)
       where
        II : (Œ£ p' Íûâ ‚Ñö , p < p' √ó p' < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)) ‚Üí Œ£ p' Íûâ ‚Ñö , p < p' √ó p' ‚àà L
        II (p' , p<p' , p'<m) = p' , (p<p' , ‚à£ (a , b , c , d) , (a<x , x<b , c<y , y<d , p'<m) ‚à£)
    rtl : ‚àÉ p' Íûâ ‚Ñö , (p < p') √ó (p' ‚àà L) ‚Üí p ‚àà L
    rtl = ‚à•‚à•-rec ‚àÉ-is-prop I
     where
      I : Œ£ p' Íûâ ‚Ñö , (p < p') √ó (p' ‚àà L) ‚Üí p ‚àà L
      I (p' , p<p' , p'<xy) = ‚à•‚à•-functor II p'<xy
       where
        II : (Œ£ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a < x √ó x < b √ó c < y √ó y < d √ó p' < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d))
           ‚Üí Œ£ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a < x √ó x < b √ó c < y √ó y < d √ó p < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)
        II ((a , b , c , d) , a<x , x<b , c<y , y<d , p'<m)= (a , b , c , d) , (a<x , x<b , c<y , y<d , ‚Ñö<-trans p p' (min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)) p<p' p'<m)

  rounded-R : rounded-right R
  rounded-R q = ltr , rtl 
   where
    ltr : q ‚àà R ‚Üí ‚àÉ q' Íûâ ‚Ñö , (q' < q) √ó (q' ‚àà R)
    ltr = ‚à•‚à•-functor I 
     where
      I : (Œ£ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a < x √ó x < b √ó c < y √ó y < d √ó max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d) < q)
        ‚Üí Œ£ q' Íûâ ‚Ñö , (q' < q) √ó (q' ‚àà R)
      I ((a , b , c , d) , a<x , x<b , c<y , y<d , m<q) = II (‚Ñö-dense fe (max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)) q m<q)
       where
        II : (Œ£ q' Íûâ ‚Ñö , (max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d) < q') √ó (q' < q)) ‚Üí Œ£ q' Íûâ ‚Ñö , (q' < q) √ó (q' ‚àà R)
        II (q' , m<q' , q'<q) = q' , q'<q , ‚à£ (a , b , c , d) , (a<x , x<b , c<y , y<d , m<q') ‚à£
    rtl : ‚àÉ q' Íûâ ‚Ñö , (q' < q) √ó (q' ‚àà R) ‚Üí q ‚àà R
    rtl = ‚à•‚à•-rec ‚àÉ-is-prop I
     where
      I : Œ£ q' Íûâ ‚Ñö , (q' < q) √ó (q' ‚àà R) ‚Üí q ‚àà R
      I (q' , q'<q , xy<q') = ‚à•‚à•-functor II xy<q'
       where
        II : Œ£ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a < x √ó x < b √ó c < y √ó y < d √ó max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d) < q'
           ‚Üí Œ£ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a < x √ó x < b √ó c < y √ó y < d √ó max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d) < q
        II ((a , b , c , d) , a<x , x<b , c<y , y<d , m<q') = (a , b , c , d) , (a<x , x<b , c<y , y<d , ‚Ñö<-trans (max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)) q' q m<q' q'<q)

  is-disjoint : disjoint L R
  is-disjoint p q (p<xy , xy<q) = {!!}
 
\end{code}
